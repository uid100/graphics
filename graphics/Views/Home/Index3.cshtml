@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{

}



<h3> minutes </h3>
<p>
    <canvas id="cvs" width="400" height="400" style="border: 1px solid #ddd">[No canvas support]</canvas>
</p>

<p>
    <li><a href="~/Home/Index5">ARC</a></li>
</p>




<script>/// This is the value that's shown on the chart
    value = 8;

    // Create the Pie chart. Without the draw event it looks just like a
    // regular donut chart. There's two datapoints so it becomes a
    // progress bar like Donut chart
    pie = new RGraph.Pie({
        id: 'cvs',

        // The value variable is the value that's shown on the chart.
        // The maximum value is 100 so create two elements based on
        // that.
        data: [value, 15 - value],

        options: {
            variant: 'donut',
            variantDonutWidth: 50,
            colors: ['red', 'white'],
            colorsStroke: 'transparent',
            shadow: false
        }
        // Use the roundRobin() effect and add a draw event listener - which
        // is then called on every frame of the animation.
    }).roundRobin({ frames: 60 }).on('draw', function (obj) {
        // This controls the width of the segments
        var width = 5;

        // Go around in a circle and add lines that emanate from the
        // center and go outwards. The RGraph path function is used here
        // which makes manipulating canvas paths (which can be quite
        // verbose) more easy.
        for (var i = 0; i < 360; i += 10) {
            RGraph.path({
                context: obj.context,
                path: 'b a % % % % % false l % % c f white',
                args: [
                    obj.centerx,
                    obj.centery,
                    obj.radius + 2,

                    // Convert the degrees values to radians
                    RGraph.degrees2Radians(i - (width / 2)),
                    RGraph.degrees2Radians(i + (width / 2)),

                    obj.centerx,
                    obj.centery
                ]
            });
        }

        // If the text drawing API object exists (which will only be on
        // the second iteration of the loop of the roundRobin() effect
        // or later) set the text property to an updated value
        if (text) {
            text.text = parseInt(value * obj.get('effectRoundrobinMultiplier')) + 'm';
        }
    });


    // Set the text variable to a drawing API text object. This
    // is the object that gets updated on each frame of the
    // roundRobin() effect (except the first iteration).
    text = new RGraph.Drawing.Text({
        id: 'cvs',
        x: pie.centerx,
        y: pie.centery,
        text: pie.data[0] + 'm',
        options: {
            textFont: 'Arial',
            textSize: 64,
            halign: 'center',
            'valign': 'center',
            colors: ['#aaa']
        }
    }).draw();
 </script>



